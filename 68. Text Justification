class Solution {
    int MAX_WIDTH;
    public List<String> fullJustify(String[] words, int maxWidth) {
        MAX_WIDTH = maxWidth;
        int n = words.length;
        int i = 0 ;
        int j = 0;
        ArrayList<String> result = new ArrayList<>();

        while(i<n){
            int curLen = words[i].length();
            j = i+1;
            int spaceSlots = 0;
            while(j<n && curLen + spaceSlots + words[j].length() + 1<=maxWidth){
                curLen += words[j].length();
                spaceSlots++;
                j++;
            }
            int TotalSpaces = maxWidth - curLen;
            int eachSpace = spaceSlots == 0 ? 0 : TotalSpaces/spaceSlots;
            int extraSpace = spaceSlots == 0 ? 0 : TotalSpaces%spaceSlots;

            if(j == n) { 
                eachSpace = 1;
                extraSpace    = 0;
            }

            result.add(WORDS(i , j , TotalSpaces , eachSpace , extraSpace , words));
            i=j;
        }
        return result;
    }
    private String WORDS(int i ,int j ,int TotalSpaces ,int eachSpace ,int extraSpace , String[] words){
        StringBuilder s = new StringBuilder();

        for(int k = i ; k < j ; k++){
            s.append(words[k]);

            if(k == j-1){
                continue;
            }

            for(int spaces = 1 ; spaces<=eachSpace ; spaces++){
                s.append(" ");
            }
            if(extraSpace>0){
                s.append(" ");
                extraSpace--;
            }
        }
        while(s.length()<MAX_WIDTH){
            s.append(" ");
        }
        return s.toString();
    }
}
